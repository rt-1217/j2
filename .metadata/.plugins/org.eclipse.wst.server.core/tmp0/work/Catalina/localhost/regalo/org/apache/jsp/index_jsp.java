/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2018-06-29 04:53:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/struts2-core-2.3.34.jar", Long.valueOf(1529644371493L));
    _jspx_dependants.put("jar:file:/C:/Users/internousdev/Desktop/workspace/workspace-tanno/j2/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/regalo/WEB-INF/lib/struts2-core-2.3.34.jar!/META-INF/struts-tags.tld", Long.valueOf(1504613532000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("    \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta http-equiv=\"Content-Script-Type\" content=\"text/javascript\" />\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n");
      out.write("<meta http-equiv=\"refresh\" content=\"7;URL='StartAction'\">\n");
      out.write("\n");
      out.write("<link href=\"https://fonts.googleapis.com/css?family=Great+Vibes\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("<script src=\"./js/fade.js\" type=\"text/javascript\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<title>インデックス</title>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("\n");
      out.write("html {\n");
      out.write("\twidth:100%;\n");
      out.write("\theight:100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("body {\n");
      out.write("\tposition:relative;\n");
      out.write("\tbackground:black;\n");
      out.write("\twidth:100%;\n");
      out.write("\theight:100%;\n");
      out.write("\n");
      out.write("\tanimation-name: anime;\n");
      out.write("\tanimation-delay: 5s;\n");
      out.write("\tanimation-duration: 2s;\n");
      out.write("}\n");
      out.write("\n");
      out.write("@keyframes anime {\n");
      out.write("0% {background:black;}\n");
      out.write("100% {background:white;}\n");
      out.write("}\n");
      out.write("\n");
      out.write("svg {\n");
      out.write("\tposition:absolute;\n");
      out.write("\ttop:50%;\n");
      out.write("\tleft:50%;\n");
      out.write("\n");
      out.write("\t-webkit-transform: translate(-50%,-50%);\n");
      out.write("\t-moz-transform: translate(-50%,-50%);\n");
      out.write("\t-ms-transform: translate(-50%,-50%);\n");
      out.write("\t-o-transform: translate(-50%,-50%);\n");
      out.write("\ttransform: translate(-50%,-50%);\n");
      out.write("\n");
      out.write("\twidth:100%;\n");
      out.write("\theight:250px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/*↓Regalo*/\n");
      out.write("\n");
      out.write("text {\n");
      out.write("    stroke: white;\n");
      out.write("    fill: white;\n");
      out.write("    font-size: 150px;\n");
      out.write("    stroke-dasharray: 100% 100%;\n");
      out.write("    stroke-width: 0.5px;\n");
      out.write("    -webkit-animation: stroke-anim 3s linear;\n");
      out.write("    animation: stroke-anim 3s linear;\n");
      out.write("    /* font-family: 'Great Vibes', cursive; */\n");
      out.write("    font-family: 'Cinzel', serif;\n");
      out.write("}\n");
      out.write("/*↑Regalo*/\n");
      out.write("\n");
      out.write("/*↓下線*/\n");
      out.write("@keyframes UnderBar {\n");
      out.write("  0% {\n");
      out.write("    opacity: 0;\n");
      out.write("    transform: translateX(-50px);\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  50% {\n");
      out.write("    opacity: 0;\n");
      out.write("    transform: translateX(-50px);\n");
      out.write("  }\n");
      out.write("\n");
      out.write("  100% {\n");
      out.write("    opacity: 0.7;\n");
      out.write("    transform: translateX(0);\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("\n");
      out.write("#underBar {\n");
      out.write("\tposition:absolute;\n");
      out.write("\ttop:60%;\n");
      out.write("\tleft:26%;\n");
      out.write("\tcontent: \"\";\n");
      out.write("\tdisplay: inline-block;\n");
      out.write("\twidth: 700px;\n");
      out.write("\theight: 1px;\n");
      out.write("\tbackground: white;\n");
      out.write("\n");
      out.write("\tanimation-duration: 4s;\n");
      out.write("\tanimation-name: UnderBar;\n");
      out.write("}\n");
      out.write("/*↑下線*/\n");
      out.write("\n");
      out.write("/*↓塗りつぶし*/\n");
      out.write("@-webkit-keyframes stroke-anim {\n");
      out.write("  0% {\n");
      out.write("    /* 100%だと最後まで表示されないので多めに設定する */\n");
      out.write("    stroke-dashoffset: 100%;\n");
      out.write("    fill:transparent;\n");
      out.write("  }\n");
      out.write("  50% {\n");
      out.write("    fill:transparent;\n");
      out.write("  }\n");
      out.write("  100% {\n");
      out.write("    stroke-dashoffset: 0%;\n");
      out.write("    fill:white;\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("\n");
      out.write("@keyframes stroke-anim {\n");
      out.write("  0% {\n");
      out.write("    /* 100%だと最後まで表示されないので多めに設定する */\n");
      out.write("    stroke-dashoffset: 100%;\n");
      out.write("    fill:transparent;\n");
      out.write("  }\n");
      out.write("  50% {\n");
      out.write("    fill:transparent;\n");
      out.write("  }\n");
      out.write("  100% {\n");
      out.write("    stroke-dashoffset: 0%;\n");
      out.write("    fill:white;\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("/*↑塗りつぶし*/\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<svg>\n");
      out.write("\n");
      out.write("\t    <text x=\"30%\" y=\"68%\">REGALO</text>\n");
      out.write("\n");
      out.write("\t</svg>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<div id=\"underBar\">\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
